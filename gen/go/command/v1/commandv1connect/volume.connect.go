// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: command/v1/volume.proto

package commandv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ijkcode/volumixer-api/gen/go/command/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VolumeServiceName is the fully-qualified name of the VolumeService service.
	VolumeServiceName = "command.v1.VolumeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VolumeServiceSetVolumeLevelProcedure is the fully-qualified name of the VolumeService's
	// SetVolumeLevel RPC.
	VolumeServiceSetVolumeLevelProcedure = "/command.v1.VolumeService/SetVolumeLevel"
	// VolumeServiceSetVolumeMuteProcedure is the fully-qualified name of the VolumeService's
	// SetVolumeMute RPC.
	VolumeServiceSetVolumeMuteProcedure = "/command.v1.VolumeService/SetVolumeMute"
)

// VolumeServiceClient is a client for the command.v1.VolumeService service.
type VolumeServiceClient interface {
	SetVolumeLevel(context.Context, *connect.Request[v1.SetVolumeLevelRequest]) (*connect.Response[v1.SetVolumeLevelResponse], error)
	SetVolumeMute(context.Context, *connect.Request[v1.SetVolumeMuteRequest]) (*connect.Response[v1.SetVolumeMuteResponse], error)
}

// NewVolumeServiceClient constructs a client for the command.v1.VolumeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVolumeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VolumeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	volumeServiceMethods := v1.File_command_v1_volume_proto.Services().ByName("VolumeService").Methods()
	return &volumeServiceClient{
		setVolumeLevel: connect.NewClient[v1.SetVolumeLevelRequest, v1.SetVolumeLevelResponse](
			httpClient,
			baseURL+VolumeServiceSetVolumeLevelProcedure,
			connect.WithSchema(volumeServiceMethods.ByName("SetVolumeLevel")),
			connect.WithClientOptions(opts...),
		),
		setVolumeMute: connect.NewClient[v1.SetVolumeMuteRequest, v1.SetVolumeMuteResponse](
			httpClient,
			baseURL+VolumeServiceSetVolumeMuteProcedure,
			connect.WithSchema(volumeServiceMethods.ByName("SetVolumeMute")),
			connect.WithClientOptions(opts...),
		),
	}
}

// volumeServiceClient implements VolumeServiceClient.
type volumeServiceClient struct {
	setVolumeLevel *connect.Client[v1.SetVolumeLevelRequest, v1.SetVolumeLevelResponse]
	setVolumeMute  *connect.Client[v1.SetVolumeMuteRequest, v1.SetVolumeMuteResponse]
}

// SetVolumeLevel calls command.v1.VolumeService.SetVolumeLevel.
func (c *volumeServiceClient) SetVolumeLevel(ctx context.Context, req *connect.Request[v1.SetVolumeLevelRequest]) (*connect.Response[v1.SetVolumeLevelResponse], error) {
	return c.setVolumeLevel.CallUnary(ctx, req)
}

// SetVolumeMute calls command.v1.VolumeService.SetVolumeMute.
func (c *volumeServiceClient) SetVolumeMute(ctx context.Context, req *connect.Request[v1.SetVolumeMuteRequest]) (*connect.Response[v1.SetVolumeMuteResponse], error) {
	return c.setVolumeMute.CallUnary(ctx, req)
}

// VolumeServiceHandler is an implementation of the command.v1.VolumeService service.
type VolumeServiceHandler interface {
	SetVolumeLevel(context.Context, *connect.Request[v1.SetVolumeLevelRequest]) (*connect.Response[v1.SetVolumeLevelResponse], error)
	SetVolumeMute(context.Context, *connect.Request[v1.SetVolumeMuteRequest]) (*connect.Response[v1.SetVolumeMuteResponse], error)
}

// NewVolumeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVolumeServiceHandler(svc VolumeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	volumeServiceMethods := v1.File_command_v1_volume_proto.Services().ByName("VolumeService").Methods()
	volumeServiceSetVolumeLevelHandler := connect.NewUnaryHandler(
		VolumeServiceSetVolumeLevelProcedure,
		svc.SetVolumeLevel,
		connect.WithSchema(volumeServiceMethods.ByName("SetVolumeLevel")),
		connect.WithHandlerOptions(opts...),
	)
	volumeServiceSetVolumeMuteHandler := connect.NewUnaryHandler(
		VolumeServiceSetVolumeMuteProcedure,
		svc.SetVolumeMute,
		connect.WithSchema(volumeServiceMethods.ByName("SetVolumeMute")),
		connect.WithHandlerOptions(opts...),
	)
	return "/command.v1.VolumeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VolumeServiceSetVolumeLevelProcedure:
			volumeServiceSetVolumeLevelHandler.ServeHTTP(w, r)
		case VolumeServiceSetVolumeMuteProcedure:
			volumeServiceSetVolumeMuteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVolumeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVolumeServiceHandler struct{}

func (UnimplementedVolumeServiceHandler) SetVolumeLevel(context.Context, *connect.Request[v1.SetVolumeLevelRequest]) (*connect.Response[v1.SetVolumeLevelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("command.v1.VolumeService.SetVolumeLevel is not implemented"))
}

func (UnimplementedVolumeServiceHandler) SetVolumeMute(context.Context, *connect.Request[v1.SetVolumeMuteRequest]) (*connect.Response[v1.SetVolumeMuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("command.v1.VolumeService.SetVolumeMute is not implemented"))
}
