// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: entity/v1/entity.proto

package entityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ijkcode/volumixer-api/gen/go/entity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EntityServiceName is the fully-qualified name of the EntityService service.
	EntityServiceName = "entity.v1.EntityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntityServiceEntityListProcedure is the fully-qualified name of the EntityService's EntityList
	// RPC.
	EntityServiceEntityListProcedure = "/entity.v1.EntityService/EntityList"
	// EntityServiceEntityByIdProcedure is the fully-qualified name of the EntityService's EntityById
	// RPC.
	EntityServiceEntityByIdProcedure = "/entity.v1.EntityService/EntityById"
	// EntityServiceEventStreamProcedure is the fully-qualified name of the EntityService's EventStream
	// RPC.
	EntityServiceEventStreamProcedure = "/entity.v1.EntityService/EventStream"
)

// EntityServiceClient is a client for the entity.v1.EntityService service.
type EntityServiceClient interface {
	EntityList(context.Context, *connect.Request[v1.EntityListRequest]) (*connect.Response[v1.EntityListResponse], error)
	EntityById(context.Context, *connect.Request[v1.EntityByIdRequest]) (*connect.Response[v1.EntityByIdResponse], error)
	EventStream(context.Context, *connect.Request[v1.EventStreamRequest]) (*connect.ServerStreamForClient[v1.EventStreamResponse], error)
}

// NewEntityServiceClient constructs a client for the entity.v1.EntityService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EntityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	entityServiceMethods := v1.File_entity_v1_entity_proto.Services().ByName("EntityService").Methods()
	return &entityServiceClient{
		entityList: connect.NewClient[v1.EntityListRequest, v1.EntityListResponse](
			httpClient,
			baseURL+EntityServiceEntityListProcedure,
			connect.WithSchema(entityServiceMethods.ByName("EntityList")),
			connect.WithClientOptions(opts...),
		),
		entityById: connect.NewClient[v1.EntityByIdRequest, v1.EntityByIdResponse](
			httpClient,
			baseURL+EntityServiceEntityByIdProcedure,
			connect.WithSchema(entityServiceMethods.ByName("EntityById")),
			connect.WithClientOptions(opts...),
		),
		eventStream: connect.NewClient[v1.EventStreamRequest, v1.EventStreamResponse](
			httpClient,
			baseURL+EntityServiceEventStreamProcedure,
			connect.WithSchema(entityServiceMethods.ByName("EventStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// entityServiceClient implements EntityServiceClient.
type entityServiceClient struct {
	entityList  *connect.Client[v1.EntityListRequest, v1.EntityListResponse]
	entityById  *connect.Client[v1.EntityByIdRequest, v1.EntityByIdResponse]
	eventStream *connect.Client[v1.EventStreamRequest, v1.EventStreamResponse]
}

// EntityList calls entity.v1.EntityService.EntityList.
func (c *entityServiceClient) EntityList(ctx context.Context, req *connect.Request[v1.EntityListRequest]) (*connect.Response[v1.EntityListResponse], error) {
	return c.entityList.CallUnary(ctx, req)
}

// EntityById calls entity.v1.EntityService.EntityById.
func (c *entityServiceClient) EntityById(ctx context.Context, req *connect.Request[v1.EntityByIdRequest]) (*connect.Response[v1.EntityByIdResponse], error) {
	return c.entityById.CallUnary(ctx, req)
}

// EventStream calls entity.v1.EntityService.EventStream.
func (c *entityServiceClient) EventStream(ctx context.Context, req *connect.Request[v1.EventStreamRequest]) (*connect.ServerStreamForClient[v1.EventStreamResponse], error) {
	return c.eventStream.CallServerStream(ctx, req)
}

// EntityServiceHandler is an implementation of the entity.v1.EntityService service.
type EntityServiceHandler interface {
	EntityList(context.Context, *connect.Request[v1.EntityListRequest]) (*connect.Response[v1.EntityListResponse], error)
	EntityById(context.Context, *connect.Request[v1.EntityByIdRequest]) (*connect.Response[v1.EntityByIdResponse], error)
	EventStream(context.Context, *connect.Request[v1.EventStreamRequest], *connect.ServerStream[v1.EventStreamResponse]) error
}

// NewEntityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntityServiceHandler(svc EntityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	entityServiceMethods := v1.File_entity_v1_entity_proto.Services().ByName("EntityService").Methods()
	entityServiceEntityListHandler := connect.NewUnaryHandler(
		EntityServiceEntityListProcedure,
		svc.EntityList,
		connect.WithSchema(entityServiceMethods.ByName("EntityList")),
		connect.WithHandlerOptions(opts...),
	)
	entityServiceEntityByIdHandler := connect.NewUnaryHandler(
		EntityServiceEntityByIdProcedure,
		svc.EntityById,
		connect.WithSchema(entityServiceMethods.ByName("EntityById")),
		connect.WithHandlerOptions(opts...),
	)
	entityServiceEventStreamHandler := connect.NewServerStreamHandler(
		EntityServiceEventStreamProcedure,
		svc.EventStream,
		connect.WithSchema(entityServiceMethods.ByName("EventStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/entity.v1.EntityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntityServiceEntityListProcedure:
			entityServiceEntityListHandler.ServeHTTP(w, r)
		case EntityServiceEntityByIdProcedure:
			entityServiceEntityByIdHandler.ServeHTTP(w, r)
		case EntityServiceEventStreamProcedure:
			entityServiceEventStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntityServiceHandler struct{}

func (UnimplementedEntityServiceHandler) EntityList(context.Context, *connect.Request[v1.EntityListRequest]) (*connect.Response[v1.EntityListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("entity.v1.EntityService.EntityList is not implemented"))
}

func (UnimplementedEntityServiceHandler) EntityById(context.Context, *connect.Request[v1.EntityByIdRequest]) (*connect.Response[v1.EntityByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("entity.v1.EntityService.EntityById is not implemented"))
}

func (UnimplementedEntityServiceHandler) EventStream(context.Context, *connect.Request[v1.EventStreamRequest], *connect.ServerStream[v1.EventStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("entity.v1.EntityService.EventStream is not implemented"))
}
